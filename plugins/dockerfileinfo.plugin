# molior-deploy plugin
# vim: syntax=sh

. /usr/lib/molior-deploy/plugins/info.plugin

preinit_deployment_dockerfileinfo()
{
    REQUIRED_HOST_COMMANDS="docker dot zip"
    do_installation=0
    do_compress=0
}

finalize_deployment_dockerfileinfo()
{
    CONTAINER_VERSION=`echo $REVISION | tr '~+' '-'`
    if [ -z "$CONTAINER_NAME" ]; then
        CONTAINER_NAME=$PROJECT-$VARIANT
    fi

    DOCKERFILE_TMP=$WORK_DIR/$(basename $DOCKERFILE).tmp

    # Modify a copy of Dockerfile to remove exclusion list
    cat >$target/reinstall-packages.sh <<EOF
rm -f /etc/dpkg/dpkg.cfg.d/excludes
apt-get update
# We don't need an init-system inside docker, but apt-get install requires something
ln -sf /bin/true /usr/sbin/update-rc.d
apt-get install --no-install-recommends --reinstall --yes \$(dpkg --get-selections | grep -v deinstall | cut -f1)
EOF
    sed '/^FROM.*/a COPY reinstall-packages.sh .\nRUN /bin/sh reinstall-packages.sh' $DOCKERFILE > $DOCKERFILE_TMP

    log "building docker image"
    DOCKER_TAG=$CONTAINER_NAME:$CONTAINER_VERSION
    eval "docker build $DOCKER_BUILD_OPTS -f $DOCKERFILE_TMP -t $DOCKER_TAG $target"
    exit_on_error "Error building docker"

    log "creating docker container"
    container_id=$(docker create $DOCKER_TAG)
    eval "docker export $container_id -o $WORK_DIR/container.tar $DOCKER_EXPORT_OPTS"

    log "extracting container"
    tar xf $WORK_DIR/container.tar -C $target

    log "creating info"
    cp -fL /etc/resolv.conf $target/etc/resolv.conf
    chroot $target apt-get update >&2
    postinst_internal_deployment_info
    finalize_deployment_info

    docker rm --force --volumes $container_id >&2
    exit_on_error "Error removing docker container"

    docker rmi --force $DOCKER_TAG >&2
    exit_on_error "Error removing docker image"
}
