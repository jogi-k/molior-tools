# molior-deploy plugin
# vim: syntax=sh

preinit_deployment_info()
{
  REQUIRED_HOST_COMMANDS="dot zip"
}

init_deployment_info()
{
  init_deployment_dir
  do_compress=0
}

postinst_internal_deployment_info()
{
  log "gathering info"
  mkdir $WORK_DIR/info

  packages_file=${PROJECT}_${REVISION}_packages.txt
  manual_packages_file=${PROJECT}_${REVISION}_packages-manual.txt
  debsecan_complete_file=${PROJECT}_${REVISION}_debsecan-complete_`date +%d%m%Y-%H%M%S`.txt
  debsecan_file=${PROJECT}_${REVISION}_debsecan_`date +%d%m%Y-%H%M%S`.txt
  debsums_file=${PROJECT}_${REVISION}_debsums-modified.txt
  debtree_file=${PROJECT}_${REVISION}_debtree.dot
  debtree_complete_file=${PROJECT}_${REVISION}_debtree-complete.dot
  debtree_svg=${PROJECT}_${REVISION}_debtree.svg
  debtree_png=${PROJECT}_${REVISION}_debtree.png
  du_file=${PROJECT}_${REVISION}_disk_usage.txt
  deploy_file=${PROJECT}_${REVISION}_deploy.conf

  cd $target
  tar $TAR_PXZ --one-file-system -cf $WORK_DIR/info/rootfs.tar.xz .
  cd - >/dev/null

  kernel_config_file=""
  if [ -L $target/vmlinuz ]; then
    KERNEL_CONFIG=`readlink $target/vmlinuz | sed s/vmlinuz/config/`
    if [ -f $target/$KERNEL_CONFIG ]; then
      kernel_config_file=`basename $KERNEL_CONFIG`
    fi
  fi

  chroot $target dpkg -l > $WORK_DIR/info/$packages_file
  exit_on_error "Error running dpkg -l"

  chroot $target apt-mark showmanual > $WORK_DIR/info/$manual_packages_file
  exit_on_error "Error running apt-mark showmanual"

  cp $target/etc/apt/sources.list $WORK_DIR/info/apt-sources.list

  cd $target/usr/share/doc
  find -name copyright | cpio -p --make-directories $WORK_DIR/info/licenses
  find -name changelog* | cpio -p --make-directories $WORK_DIR/info/changelogs
  cd - >/dev/null

  test -z "$kernel_config_file" || cp $target/boot/$kernel_config_file $WORK_DIR/info

# FIXME: fstab is empty with deployment type dir above
#  test ! -f $target/etc/fstab || cp $target/etc/fstab $WORK_DIR/info

  # make sure required essential packages are installed
  chroot $target apt-get install -y bash init-system-helpers findutils ucf >&2
  chroot $target apt-get install -y util-linux >&2
  cd $target
  du -hs `find $target -maxdepth 1 -type d -printf '%P\n' | sed -e "/^proc/d" -e "/^sys/d" -e "/^dev/d"` > $WORK_DIR/info/$du_file
  cd - >/dev/null

  chroot $target apt-get -y install debsecan debsums >&2
  exit_on_error "Error installing: debsecan debsums"

  export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
  chroot $target debsecan > $WORK_DIR/info/$debsecan_complete_file
  exit_on_error "Error running debsecan"

  chroot $target debsecan --only-fixed --suite $SUITE > $WORK_DIR/info/$debsecan_file
  exit_on_error "Error running debsecan"

  chroot $target debsums -ac > $WORK_DIR/info/$debsums_file
  # debsums will return error, no checking
  chroot $target apt-get -y purge debsecan debsums >&2
  exit_on_error "Error removing: debsecan debsums"

  chroot $target apt-get -y autoremove --purge >&2
  exit_on_error "Error running autoremove"

  chroot $target apt-get -y install debtree >&2
  exit_on_error "Error installing: debtree"

  chroot $target debtree -I -R -r --no-recommends --no-skip --show-all --no-versions $INSTALL_PACKAGE > $WORK_DIR/info/$debtree_complete_file
  exit_on_error "Error running debtree"

  chroot $target debtree -I -R -r --no-recommends --no-versions $INSTALL_PACKAGE > $WORK_DIR/info/$debtree_file
  exit_on_error "Error running debtree"

  dot -Tsvg $WORK_DIR/info/$debtree_file > $WORK_DIR/info/$debtree_svg
  exit_on_error "Error running dot"

  dot -Tpng $WORK_DIR/info/$debtree_file > $WORK_DIR/info/$debtree_png
  exit_on_error "Error running dot"
}

finalize_deployment_info()
{
  deployment=$(get_deployment_filename "zip")
  log "creating $deployment"
  umount_bootstrap
  umount_fs
  cd $WORK_DIR/info
  zip -r ../$deployment * 1>&2
  cd - >/dev/null
}
