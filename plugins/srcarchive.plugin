# molior-deploy plugin
# vim: syntax=sh

preinit_deployment_srcarchive()
{
    do_installation=0
    ARCH="amd64"
}

download_project_sources()
{
  project=$1
  version=$2
  project_fullname=${project}_${version}

  destdir="$WORK_DIR/sources/${project_fullname}"
  mkdir -p "$destdir"

  workdir="$WORK_DIR/workdir/${project_fullname}"
  mkdir -p "$workdir"

  log_info "downloading source packages for ${project_fullname} ..."

  MOLIOR_API_PROJECT_URL=$MOLIOR_URL/api2/project/$project/$version
  MOLIOR_REPOS_PROJECT_URL=$MOLIOR_REPO_URL/$BASEMIRROR/$BASEVERSION/repos/$project/$version

  # fetch lastes build information
  repositories=$(curl -s "$MOLIOR_API_PROJECT_URL/repositories" | jq -jr '.results[] | .name, "|", .last_build.sourcename, "|", .last_build.buildstate, "\n"')

  # Fail early if there are no repositories
  if [ -z "$repositories" ]; then
      log_error "no source repositories"
  fi

  # fetch Sources and get directory and source package name
  wget -q -O "$workdir/Sources" "$MOLIOR_REPOS_PROJECT_URL/dists/stable/main/source/Sources"
  exit_on_error "Failed to download Sources file"

  # 'repositories' is a list of tuples sourcename|buildstate, one per line
  for line in $repositories; do
      reponame=$(echo $line | cut -d '|' -f1)
      sourcename=$(echo $line | cut -d '|' -f2)
      buildstate=$(echo $line | cut -d '|' -f3)
      # There is no last build for this repo
      if [ "$sourcename" = "null" ]; then
          log_warn "no last_build found for $reponame"
          continue
      fi
      # If buildstate is not successful, fail right away
      if [ "$buildstate" != "successful" ]; then
          log_warn "$sourcename last_build failed: buildstate=$buildstate"
          continue
      fi

      srcinfo=$(/usr/lib/molior-tools/find-latest-version.pl "$sourcename" < "$workdir/Sources")
      if [ -z "$srcinfo" ]; then
          log_warn "no latest version found for $sourcename"
          continue
      fi

      FILENAME=$(echo "$srcinfo" | cut -d ' ' -f 1)/$(echo "$srcinfo" | cut -d ' ' -f 2)
      REVISION=$(echo "$srcinfo" | cut -d ' ' -f 3)

      # Third-party are those sources whose revision contain the "-" character
      if [ "$SRCARCHIVE_THIRD_PARTY_ONLY" = "yes" ]; then
          if echo "$REVISION" | grep -vq "-"; then
              log_info "skipping $sourcename $REVISION: not third party"
              continue
          fi
          log_debug "including third-party $sourcename $REVISION"
      fi

      FILEBASENAME=$(basename "$FILENAME")
      log "downloading $FILEBASENAME"
      wget -q -O "$destdir/$FILEBASENAME" "$MOLIOR_REPOS_PROJECT_URL/$FILENAME"
      exit_on_error "Error downloading $MOLIOR_REPOS_PROJECT_URL/$FILENAME"
  done

  if [ "$SRCARCHIVE_RECURSIVE" = "yes" ]; then
    # Recursively download dependencies, too
    dependencies=$(curl -s "$MOLIOR_API_PROJECT_URL/dependencies" | jq -jr '.results[] | .project_name, "|", .name, "|", .is_mirror, "\n"')
    for line in $dependencies; do
        dep_name=$(echo $line | cut -d '|' -f1)
        dep_version=$(echo $line | cut -d '|' -f2)
        dep_is_mirror=$(echo $line | cut -d '|' -f3)
        if [ "$dep_is_mirror" = "true" ]; then
            log_notice "excluding mirror dependency $dep_name $dep_version"
        else
            download_project_sources $dep_name $dep_version
        fi
    done
  fi
}

finalize_deployment_srcarchive()
{
  deployment=$(get_deployment_filename "tar")
  download_project_sources "$PROJECT" "$VERSION"
  tar -C "$WORK_DIR/sources" -cf "$WORK_DIR/$deployment" .
}
