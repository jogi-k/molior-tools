#!/bin/sh

PREREQ=""

# Output pre-requisites
prereqs()
{
  echo "$PREREQ"
}

case "$1" in
  prereqs)
    prereqs
    exit 0
    ;;
esac

. /scripts/functions

# molior busybox override binaries
export PATH=/mbin:$PATH

ln -sf mke2fs /mbin/mkfs.ext2
ln -sf mke2fs /mbin/mkfs.ext3
ln -sf mke2fs /mbin/mkfs.ext4

# disable dmesg to console
cat /proc/sys/kernel/printk > /tmp/printk.bak
echo 0 > /proc/sys/kernel/printk

sleep 1

titlecolor="\033[1;32m"
errorcolor="\e[31m\e[1m"
textprefix="  "

. /scripts/molior-deploy.sh.inc
. /scripts/install.conf

# include installer hooks if provided
if [ -f /scripts/installer-hooks.sh.inc ]; then
  . /scripts/installer-hooks.sh.inc
fi

if type installer_init >/dev/null 2>&1; then
  installer_init
fi

logo()
{
  if type installer_logo >/dev/null 2>&1; then
    installer_logo
    return
  fi

  clear
  echo -en "$titlecolor"
  echo "$textprefix                   _ _            "
  echo "$textprefix   _ __ ___   ___ | (_) ___  _ __ "
  echo "$textprefix  | '_ \` _ \\ / _ \\| | |/ _ \\| '__|"
  echo "$textprefix  | | | | | | (_) | | | (_) | |   "
  echo "$textprefix  |_| |_| |_|\\___/|_|_|\\___/|_|   "
  echo
  echo "$textprefix        --- Installer ---    $MOLIOR_TOOLS_VERSION"
  echo -e "\033[1;m"
}

logo
echo -n -e '\033[9;0]\033[14;0]' > /dev/console
stty -echo

mkdir -p /mnt/source
SOURCEDISK=""
MOUNTOPTS=""
SUCCESS=0

if [ -z "$INSTALLER_DISK_MIN" ]; then
  INSTALLER_DISK_MIN=3
fi

log_error()
{
  if type installer_failed >/dev/null 2>&1; then
    installer_failed $@
  fi

  echo -e "$textprefix${errorcolor}E: $@\e[0m"

  set +x
  stty echo
  exec 2>&3 3>&-
  busybox sh
  exit 1
}

log()
{
  echo -e "$textprefix * $@"
}

finish()
{
  if [ "$SUCCESS" -eq 0 ]; then
    echo
    log_error "Installation failed, see $errlog"
  fi
}
trap finish EXIT

mkdir -p /var/log
errlog=/var/log/installer.log
exec 3>&2
exec 2>$errlog
set -x

if [ -z "$SFDISK" ]; then
  log_error "Error: partitions not definded, please set \$SFDISK"
fi

if [ "$INSTALLER_USE_PXE" != "yes" -a -z "$INSTALLER_DOWNLOAD_URL" ]; then

  # we are booting from usb, find the disk
  echo -n "${textprefix}Searching installation media ..."

  # scan block devices
  for d in `ls /sys/block`; do
    blkid /dev/$d > /dev/null
  done

  FOUND=false
  for i in `seq 10`
  do
    sleep 1
    LINE=`blkid | grep MLR:`
    ret=$?
    if [ "$ret" -eq "0" ]; then
      FOUND=true
      SOURCE=`echo $LINE | cut -f1 -d:`
      SOURCEDISK=`echo $SOURCE | head -c8`
      break
    fi
  done

  if [ -z "$SOURCEDISK" ]; then
    echo -en "\r"
    log_error "Error: could not find install medium, cannot continue."
  fi

  if blkid $SOURCE | grep -q iso9660 ; then
    modprobe iso9660
  fi
  echo -e "\r${textprefix}Installing from: $SOURCE                                "

  mount $SOURCE /mnt/source $MOUNTOPTS

else

  # we are booting from pxe, download the image
  echo "${textprefix}Downloading install medium ..."

  configure_networking

  if [ -n "$INSTALLER_DOWNLOAD_URL" ]; then
    # allow progress bar to be displayed
    set +x
    exec 4>&2 # backup logfile
    exec 2>&3
    wget -O /mnt/source/image.cpio$INSTALLER_COMPRESSION_EXT $INSTALLER_DOWNLOAD_URL/image.cpio$INSTALLER_COMPRESSION_EXT
    ret=$?
    exec 2>&4 4>&- # restore logfile
    set -x
    if [ $ret -ne 0 ]; then
        log_error "Error downloading image, aborting installation."
    fi
  else
    tftp -g -l /mnt/source/image.cpio$INSTALLER_COMPRESSION_EXT -r image.cpio$INSTALLER_COMPRESSION_EXT -b 16384 "$ROOTSERVER"
  fi
fi

if [ -n "$SOURCEDISK" ]; then
  disks=`ls /sys/block/ | sed s_^_/dev/_ | grep -v $SOURCEDISK`
else
  disks=`ls /sys/block/ | sed s_^_/dev/_`
fi

if type installer_preinst >/dev/null 2>&1; then
  installer_preinst
fi

if [ -z "$disks" ]; then
  log_error "No installable disks found, aborting installation."
fi

hostname=""
hostnameok=false
while ! $hostnameok; do

  if [ -z "$HOSTNAME" -o "$INSTALLER_ASK_HOSTNAME" != "no" ]; then
    echo
    echo -n "${textprefix}Please specify the system's hostname [$HOSTNAME]: "
    stty echo
    read hostname
    stty -echo
  fi
  if [ -z "$hostname" ]; then
    hostname="$HOSTNAME"
    hostnameok=true
    break
  fi
  if [ "$hostname" = "shell" ]; then
    exec 4>&2 # backup logfile
    exec 2>&3
    stty echo
    busybox sh
    stty -echo
    exec 2>&4 4>&- # restore logfile
    logo
    continue
  fi
  if ! echo "$hostname" | grep -q '^[a-z0-9-]\+$'; then
    echo "${textprefix}Invalid hostname, use only [a-z0-9-]"
    INSTALLER_ASK_HOSTNAME="yes"
  else
    hostnameok=true
    break
  fi
done

CHPASSWD=""
if [ -n "$INSTALLER_PASSWD_USERS" ]; then
  for user in $INSTALLER_PASSWD_USERS
  do
    pwok=false
    while ! $pwok; do
      echo -e -n "\n${textprefix}Please specfiy the password for user '$user' (leave empty for default): "
      stty -echo
      read  password
      echo
      if [ -z "$password" ]; then
        pwok=true
        break
      fi
      echo -n "${textprefix}Please confirm the password: "
      stty -echo
      read password_confirmed
      echo
      if [ "$password" == "$password_confirmed" ]; then
        pwok=true
        break
      fi
      echo "${textprefix}Error: passwords do not match"
    done

    if [ "$password" != "" ]; then
      if [ -n "$CHPASSWD" ]; then
        # add newline
        CHPASSWD="$CHPASSWD
        "
      fi
      CHPASSWD="$CHPASSWD$user:$password"
    fi
    password=""
  done
fi

if type installer_configure >/dev/null 2>&1; then
  installer_configure
fi

found=0
if [ -n "$INSTALLER_INSTALL_DISK" ]; then
  disk=`readlink -f $INSTALLER_INSTALL_DISK`
  if [ -b "$disk" ]; then
    found=1
  else
    log_error "Error: disk $disk not found, aborting installation."
  fi
fi

if [ -n "$RAID_NAME" ]; then
  for d in $RAID_DEVICES;
  do
    if [ ! -b "$d" ]; then
      log_error "Error: disk $d not found, aborting installation."
    fi
  done
  disk=`echo "$RAID_DEVICES" | cut -d" " -f1`
  found=1
fi

while [ $found -ne 1 ]; do
  idx=0
  echo
  echo "${textprefix}Searching disks ..."
  for d in $disks; do
    if [ "$d" != "$SOURCEDISK" ]; then
      size=`blockdev --getsize64 $d 2>/dev/null || true`
      if [ -z "$size" ]; then
        continue
      fi
      size=$((size / 1024 / 1024 / 1024))
      # FIXME: verify deployment size
      if [ "$size" -ge $INSTALLER_DISK_MIN ]; then
        let idx++ || true
        echo "  $idx) $d    Size: ${size}GiB"
        eval "disk${idx}=$d"
      fi
    fi
  done

  if [ "$idx" -eq 0 ]; then
    log_error "Error: no disk >= ${INSTALLER_DISK_MIN}GiB found, aborting installation."
  elif [ "$idx" -gt 1 ]; then
    echo -n "${textprefix}Enter disk number to install: "
    stty echo
    read input
    stty -echo
    eval "disk=\$disk${input}"
  else
    eval "disk=\$disk${idx}"
  fi
  if [ -e $disk ]; then
    found=1
  else
    echo "${textprefix}Unknown disk: \"$disk\""
  fi
done

if [ "$INSTALLER_ASK_CONFIRM" != "no" ]; then
  echo
  echo "${textprefix}Are you sure to install to $disk ?"
  echo -en "\033[1;31m"
  if [ -n "$LVM_VG" ]; then
    echo "${textprefix}Warning: this will erase all existing data including any LVM VG !"
  else
    echo "${textprefix}Warning: this will erase all existing data !"
  fi
  echo -e "\033[1;m"
  echo "${textprefix}Press 'Enter' to confirm, Ctrl-Alt-Delete to reboot"
  read x
  if [ "$x" = "shell" ]; then
    exec 4>&2 # backup logfile
    exec 2>&3
    stty echo
    busybox sh
    exec 2>&4 4>&- # restore logfile
    exit 0
  fi
fi

logo
sleep 1
starttime=$(date +"%s")
set -e

if [ -x /sbin/lvm ]; then
  ln -sf lvm /sbin/vgs
  ln -sf lvm /sbin/vgremove
  ln -sf lvm /sbin/vgcreate
  ln -sf lvm /sbin/pvcreate
  ln -sf lvm /sbin/lvcreate
fi

echo -n -e $titlecolor
echo "${textprefix}Creating filesystems ..."
echo -n -e "\033[1;m"

log "partitioning disk $disk"
if [ -n "$LVM_VG" ]; then
  for vg in `vgs --no-heading -o vg_name`; do
    vgremove -f "$vg" >&2
  done
fi

if [ -n "$RAID_NAME" ]; then
  for raid in `mdadm --detail --scan | cut -d " " -f2`;
  do
    mdadm --stop $raid
    mdadm --remove $raid || true
  done
fi

wipefs -af $disk >/dev/null 2>&1

blockdev --rereadpt $disk

detect_partname_scheme

create_partitions

create_fs   # this will set rootpart used below

target=/mnt/target
mkdir -p $target
mount_fs

echo -n -e $titlecolor
echo "${textprefix}Copying system ..."
echo -n -e "\033[1;m"
cd $target

case $INSTALLER_COMPRESSION in
   none)
   ;;
   xz)
       bytes=`xz --robot --list /mnt/source/image.cpio$INSTALLER_COMPRESSION_EXT 2>/dev/null | grep totals | awk '{ print $5 }'`
   ;;
   gz|gzip)
       bytes=`gzip -l /mnt/source/image.cpio$INSTALLER_COMPRESSION_EXT | grep /mnt/source/image.cpio | awk '{ print $2 }'`
   ;;
esac

# allow progress bar to be displayed
set +x
exec 4>&2 # backup logfile
exec 2>&3

case $INSTALLER_COMPRESSION in
   none)
       pv /mnt/source/image.cpio | cpio -B -H newc -imd --no-absolute-filenames 2>/dev/null
   ;;
   xz)
       xz -dc /mnt/source/image.cpio$INSTALLER_COMPRESSION_EXT | pv -s $bytes | cpio -B -H newc -imd --no-absolute-filenames 2>/dev/null
   ;;
   gz|gzip)
       gzip -dc /mnt/source/image.cpio$INSTALLER_COMPRESSION_EXT | pv -s $bytes | cpio -B -H newc -imd --no-absolute-filenames 2>/dev/null
   ;;
   *)
       log_error "Compression '$INSTALLER_COMPRESSION' not supported"
   ;;
esac

exec 2>&4 4>&- # restore logfile
set -x

cd /

if [ "$INSTALLER_USE_PXE" != "yes" -a -z "$INSTALLER_DOWNLOAD_URL" ]; then
  umount /mnt/source
fi

if [ -n "$hostname" ]; then
  if [ -n "$INSTALLER_HOSTNAME_APPEND_MAC_IFACE" ]; then
      mac=`tr -d : < /sys/class/net/$INSTALLER_HOSTNAME_APPEND_MAC_IFACE/address`
      hostname="$hostname-$mac"
  fi

  echo "$hostname" > $target/etc/hostname
  sed -i "s/127\.0\.1\.1 .*/127\.0\.1\.1 $hostname/" $target/etc/hosts
fi

if [ -n "$CHPASSWD" ]; then
  echo "$CHPASSWD" | chroot $target chpasswd
fi

echo -n -e $titlecolor
echo "${textprefix}Finalizing ..."
echo -n -e "\033[1;m"

create_fstab

mount --bind /dev $target/dev
mount --bind /sys $target/sys
mount proc -t proc $target/proc
mkdir -p $target/run/udev
mount --bind /run/udev/ $target/run/udev

log "installing boot loader"

# ensure root=UUID= boot parameter
rootuuid=`blkid  -o value -s UUID $rootpart`
if [ ! -L $target/dev/disk/by-uuid/$rootuuid ]; then
  mkdir -p $target/dev/disk/by-uuid
  ln -s $rootpart $target/dev/disk/by-uuid/$rootuuid
fi

if [ -n "$LINUX_CMDLINE" ]; then
  sed -i "s%^GRUB_CMDLINE_LINUX=.*$%GRUB_CMDLINE_LINUX=\"$LINUX_CMDLINE\"%" $target/etc/default/grub
fi

if type installer_setup_bootloader >/dev/null 2>&1; then
  installer_setup_bootloader
else
  if [ "$TARGET_BOOTTYPE" = "efi" ]; then
    if modprobe efivars; then
      if [ -n "$RAID_NAME" ]; then
        # fix for grub-install error where efibootmgr complains about missing -d (disk) parameter
        chroot $target grub-install --modules mdraid1x --recheck --force --removable
      else
        chroot $target grub-install --recheck --force
      fi
    else # no EFI support in current boot mode
      chroot $target grub-install --recheck --force --target x86_64-efi
      mkdir -p $target/boot/efi/EFI/BOOT
      mv $target/boot/efi/efi/debian/grubx64.efi $target/boot/efi/EFI/BOOT/bootx64.efi
    fi
  else
    if [ -n "$RAID_NAME" ]; then
      echo "`chroot $target grub-probe -t drive -d $RAID_NAME` $RAID_NAME" > $target/boot/grub/device.map
      chroot $target grub-install --modules part_msdos --force --no-floppy $disk >/dev/null 2>&1
    else
      chroot $target grub-install --modules part_msdos --force --no-floppy --recheck $disk >/dev/null 2>&1
    fi
  fi
  chroot $target update-grub
fi

if type installer_postinst >/dev/null 2>&1; then
  installer_postinst
fi

if [ -n "$RAID_NAME" ]; then
  echo -n -e $titlecolor
  echo "${textprefix}Finalize raid setup"
  echo -n -e "\033[1;m"

  mdadm $RAID_NAME --add `echo "$RAID_DEVICES" | cut -d" " -f2-`

  # wait for sync starts
  while true; do
    if grep -q "recovery" /proc/mdstat; then
      break
    else
      sleep 1
    fi
  done

  # wait for sync ends
  while true; do
    if grep -q "recovery" /proc/mdstat; then
      sleep 1
      p=`grep "recovery" /proc/mdstat | tr -s " " | cut -d" " -f5,7-`
      echo -ne "\r${textprefix} * syncing raid disks: $p"
    else
      break
    fi
  done
  echo
fi

umount $target/run/udev
umount $target/dev
umount $target/sys
umount $target/proc

SUCCESS=1
set +e

endtime=$(date +"%s")
diff=$(($endtime-$starttime))
log "installation time: $(($diff / 60))min $(($diff % 60))sec"
echo -n -e $titlecolor
echo -n "${textprefix}Done ! "
echo -e "\033[1;m"

cp $errlog $target/var/log
umount_fs >/dev/null 2>&1

if [ -n "$SOURCEDISK" ]; then
  eject -rs $SOURCEDISK 2>&1
fi

if [ "$INSTALLER_ASK_REBOOT" != "no" ]; then
  echo -n "${textprefix}=> Please remove the installation media and press 'Enter' to reboot "
  read x
fi

if type installer_finished >/dev/null 2>&1; then
  installer_finished
fi
